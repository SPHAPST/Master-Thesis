'''
MIT License

Copyright (c) 2023 Sophia Apostolidou

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
'''

# Visualize the results of the optimization process in QGIS

from qgis.PyQt.QtCore import *
from qgis.core import *
import os

# Supply path to where is qgis installed
qgs = QgsApplication([], False)
qgs.initQgis()

# Set the project path
path = 'D:\My Documents\Egna_projekt\Textsättning\Testdata\London\London20211006_Clip.qgz'
project = QgsProject.instance()
project.read(path)

# define new folder path
folder = 'D:/My Documents/Egna_projekt/Textsättning/Testdata/London/StudyArea/Optimization'
if not os.path.exists(folder):
    os.makedirs(folder)


def getpositions(layergroup): # layergroup = getLayer("Icons")
    coords = []
    for layer in layergroup:
        features = layer.getFeatures()
        for feature in features:
            geom = feature.geometry()
            x_coord = geom.asPoint().x()
            y_coord= geom.asPoint().y()
            coords.append((x_coord, y_coord))
    return coords

def getLayer(group_name): #i.e "Icons"
    # Get all layers from the a group (i.e Icons)
    name = group_name
    root = project.layerTreeRoot()
    group = root.findGroup(name)
    #print(group)
    #Initialize a list to store all the layers in the group
    g_layers = []

    # Iterate through all child layers in a group
    for child in group.children():
        # Append the current child layer being iterated through to the list
        g_layers.append(child.layer())
        # Print the current child layer being iterated through
        #print('Child', child)

    return g_layers


def create_layer_from_coords(x_coords, y_coords, name, crs="EPSG:27700"):
    """Create a new memory layer from given x and y coordinates."""
    # Create a new memory layer
    vl = QgsVectorLayer("Point?crs=" + crs, name, "memory")
    pr = vl.dataProvider()

    # Add features to the layer
    for x, y in zip(x_coords, y_coords):
        f = QgsFeature()
        f.setGeometry(QgsGeometry.fromPointXY(QgsPointXY(x, y)))
        pr.addFeature(f)

    # Update the layer's extent
    vl.updateExtents()
    return vl

# Get all layers from the group
g_layers = getLayer("60center")

# Extract original coordinates
group_name = "60center"
coords = getpositions(getLayer(group_name))
x_coords = [coord[0] for coord in coords]
y_coords = [coord[1] for coord in coords]

# ASS = 0.41
x_opt = [530253.54527778,530081.01026667,530563.01806299,530484.19947778,530558.81206114,529167.77777778,529479.77777778,530636.95766345,529168.77777778,530670.14786487,529217.66666667,530045.26363505,529962.03070385,530080.76449846,530642.22490352,529987.92287730,529989.66666667,529990.94945089,529984.77777778,530627.77777778,530239.99555283,529011.77777778,530617.03421070,529477.42033765,529340.66666667,530259.84996778,530149.96540675,529625.40459234,530298.14366630,530596.24684215,529910.73649293,530030.16259496,530418.37397778,530224.77777778,529020.65063784,530606.66666667,529972.35608946,530572.03760809,530012.66075705,529572.76757778,529909.03677778,529021.67391211,529821.10641022,530195.77777778,530649.77777778,530692.61952222,529189.27587778,530046.66668641,529544.22222222,529930.66666667,529734.04997183,530441.77777778,529287.66666667,530280.66666667,529228.65043023,529209.66666667,529048.77777778,530533.22222222,530409.92236158,530681.66666667,529832.37771888,530439.71317778,529478.66666667,529210.66666667,528978.64742225,529745.51904016,529074.85097778,529954.09693870,530167.77777778,530524.50021483,530404.23708253,529855.77777778,529157.36497208,529735.93612222,529968.31766667,530270.66666667,530693.22222222,530512.35337944,529892.87046484,529982.77777778,529353.66666667,529022.05742222,530645.77777778,529580.16577212,529240.78141136,529632.77777778,529169.66666667,530109.62396667,529465.87067018,530087.70629867,529351.66666556,530749.77777778,529331.14946667,529732.77777778,530407.96036023,529410.31669961,530670.98397778,529976.66446667,529621.66666667,529236.66666667,529997.77777778,529116.77777778,529683.68149865,530102.77777778,530339.66666667,530511.77777778,529796.66666667,529695.93763992,529442.44426055,529411.76436667,529255.77777778,529519.18216273,530755.81323423,530385.62889287,529467.77777778,529932.66666667,529735.66666667,530234.24126028,529247.73551553,530683.77777778,530483.55697778,530274.77777778,529272.77777778,529289.77777778,529487.66666667,530437.49254615,529030.51998922,530586.87769934,530245.76614078,529080.03509196,530443.49975838,530657.77777778,529847.44963668,529692.77777778,529376.77777778,529472.85378211,529311.84552222,529767.28861361,529629.66652681,529064.77777778,529946.54950099,530508.77777778,530773.22222222,529939.66666667,530208.22222222,530655.66666719,530572.61673342,529796.66666667,530078.40359386,530816.75664615,530305.66682975,530777.77777778,530485.31484569,530711.99049847,529703.77777778,530309.30193456,529506.50211094,529332.91565247,529992.19737778,530245.63951157,529074.39139685,529324.88319092,530274.36356667,530264.68246122,530197.18182275,529931.94882970,529040.53093507,530146.98247778,530358.06776667,529837.61120838,530222.14336667,530187.45791967,529343.73690959,530138.60307568,529064.05563443,529214.91360244,529580.09666667,529170.72912259,529356.87178063,529850.27222222,529582.92481110,529084.02861837,529454.83892514,529272.64586774,529117.03428579,529723.12591648,529063.54349486,530667.50943418,529992.09288020,529441.46346719,529757.67994659,529964.97222222,530145.41164643,530474.52904647,530636.37766247,530471.90703378,530072.71361811,529952.00721345,530156.72130643,529392.58107923,529812.42145294,530357.00479278,530020.35817932,530425.29179262,529154.93409285,529911.89748412,530254.98475219,529681.88765791,529788.65331126,529217.54013619,530532.77031791,530643.50334272,530644.56114327,529824.51814359,530080.08394971,530536.88246992,530060.65027115,529730.11356623,529383.59943180,529313.15731253,529353.66574688,529415.36283030,529504.87516450,529878.29378179,529963.82384246,530405.59838908,530773.17884963,530401.03607778,529236.61936667,530403.39616667,529075.65122468,529514.97905742,530288.18636053,530081.51546667,530143.31560291,530112.92426667,529198.90223500,530122.27687778,530412.39556667,529456.68515665,529863.82778742,529019.72767864,530328.93919882]

y_opt = [181655.97087778,181382.94339693,181413.96254147,180948.76426667,181686.40239953,181233.77777778,181281.66666667,181578.66666667,182284.77777778,180707.22222222,180809.80579035,182016.87235826,180701.07170905,182134.77777778,181504.82289138,182298.17347969,181406.21881514,181251.66666667,180745.06050543,180920.22222222,181501.36125488,181278.66666667,181781.84580915,182381.66666667,182354.66666667,181368.16427230,181859.77777778,182466.86467508,181455.79279404,180915.56320826,181035.77777778,181266.58717778,181604.73480284,181476.52309254,180806.22402501,180880.71829290,181398.28719939,181655.17728535,182188.65324630,181312.69030545,182360.55062129,181112.70318401,180900.54387778,181842.83542111,181789.77777778,182427.89106667,182246.99967778,182142.66666667,181828.97595704,181314.80767369,180673.55672414,181481.77777778,182185.74942322,181884.72702351,181248.48491357,182413.77777778,181132.77777778,180752.17563269,181705.57941535,182409.66666667,180938.09707778,180695.47216667,181872.53228482,182393.73731685,181304.75510133,181338.20282908,180909.87537778,180941.94952836,181604.22222222,181419.93889857,181604.71395101,181447.95045515,180888.69278720,181490.68782222,181388.00477778,181463.77777778,181007.67881492,181435.74504621,181130.22222222,180824.89722637,182340.77777778,180854.83146667,180960.60980775,180691.66666667,182379.72324666,180768.42921523,180902.39498456,181768.42776667,182221.88295715,182109.66666667,182323.77777778,180895.02057986,182105.38023782,181542.45386200,181712.97486667,182029.77777778,180742.78593110,182115.94785238,182496.54927024,180806.75810981,181494.66666667,181640.65487306,181727.93655142,182457.65396742,182196.66666667,182139.22222222,181940.77777778,181721.82376135,181681.66679188,181724.16558362,182356.77777778,182429.66666667,181834.05206897,181176.66666667,182315.38110925,182172.58068202,182328.11116948,182145.77777778,181849.77777778,181265.91973023,181328.08096667,182472.46208076,182237.12618077,181434.66666667,181561.91215448,181493.66274224,180725.42222664,181711.77255375,181368.77777778,181751.66796728,180724.99327720,181153.79448774,181034.08696502,181253.66705291,180842.95069488,181062.01169442,181138.33962222,180974.66666667,180911.22222222,181122.77777778,180831.77777778,180918.20267262,181068.83804586,181325.77777778,181661.77284963,181350.66666667,180845.66666667,181940.77945237,182198.30036667,182292.48396503,181470.66666667,181579.66666667,181328.66666667,181096.77850447,181594.77771142,181658.17798928,180912.41208453,181550.18727778,182182.63695751,181116.60876667,181913.48697778,181493.90017778,181890.26526344,181982.08007778,181396.34890160,180930.33927778,182487.77777778,182224.91487778,181285.44199002,181507.88307778,182190.38887778,180714.90286667,181126.24782222,181334.18465717,181355.51687755,180722.03624770,180919.97016547,180857.14182215,181353.61053872,180901.41666667,181041.20957111,180972.16825204,181280.27862554,181180.75893525,181145.21431258,180737.04165425,180946.72506678,180992.17534334,182006.41321923,181655.72674907,180727.47222222,180760.77777778,181605.11960109,180778.99539686,180933.04345212,180712.92131351,180727.17772615,182266.82444267,182257.24529574,182276.60295538,181430.77222222,181253.14813835,180832.51037778,180953.07555565,180977.92614978,181508.92042963,182065.03076961,180693.59770288,181041.48992093,181123.41926715,181348.40470382,180948.83278709,180877.50531051,181507.38549825,180763.51348219,180885.96242789,180910.91868562,181631.10995689,182132.39456485,182216.70345060,181494.22443956,181389.23533269,181901.24519389,182401.18580476,182135.74774174,181942.96666667,181854.43912683,181794.60307778,182439.20367778,180736.35367778,181475.04362222,181499.41477778,181385.27117974,182113.01297778,182279.22593603,181111.56257778,181109.11916381,182059.03566667,180868.30312835,181049.52979005,180743.98280018,181148.09642222,180867.09839380]


# Create a new group called "Optimization"
root = project.layerTreeRoot()

# Check if the "Optimization" group already exists
optimization_group = root.findGroup("Optimization")
if not optimization_group:
    # If it doesn't exist, create it
    optimization_group = root.addGroup("Optimization")

# Initialize index to keep track of the position in the optimized coordinates list
index = 0

# Iterate through each layer in the original group
for layer in g_layers:
    # Get the number of features in the current original layer
    num_features = layer.featureCount()

    # Slice the optimized coordinates list based on the number of features
    x_opt_slice = x_opt[index:index+num_features]
    y_opt_slice = y_opt[index:index+num_features]

    # Create a new layer with the sliced optimized coordinates
    new_layer_name = layer.name() + "_opt"
    new_layer = create_layer_from_coords(x_opt_slice, y_opt_slice, new_layer_name, layer.crs().authid())

    # Set the symbology of the new layer to match the original layer
    new_layer.renderer().setSymbol(layer.renderer().symbol().clone())
    new_layer.triggerRepaint()

    # Save the new layer to the specified folder
    new_layer_path = os.path.join(folder, new_layer_name + ".shp")
    QgsVectorFileWriter.writeAsVectorFormat(new_layer, new_layer_path, "utf-8", layer.crs(), "ESRI Shapefile")

    # Add the new layer to the project and to the "Optimization" group
    project.addMapLayer(new_layer, False)
    optimization_group.addLayer(new_layer)

    # Update the index for the next iteration
    index += num_features

# Save the changes to the project
project.write()

# Exit QGIS
qgs.exitQgis()

print('\n', 'Process completed successfully!', '\n')
